#include<stdio.h>
#include<stdlib.h>
#define MAX 10

int j=0, pop[MAX], visited[MAX] = {0}, DFS[MAX], k=0;
void dfs(int,int,int [][MAX]);
void topo(int,int [][MAX]);

int main(){
  int i,k,n,G[MAX][MAX];
  printf("Enter no of vertices: ");
  scanf("%d",&n);
  printf("Enter adjacency matrix\n");
  for(i=1;i<=n;i++){
    for(k=1;k<=n;k++){
      scanf("%d",&G[i][k]);
    }
  }
  topo(n,G);
  printf("DFS Order: ");
  for (int i=0; i<n; i++)
  printf("%d ", DFS[i]);
  printf("\nTopological Order:");
  for(i=n;i>0;i--)
  printf("%d ",pop[i]);
  printf("\n");
  return 0;
}

void dfs(int u,int n,int G[][MAX]){
  int i,v,top=-1, s[MAX], flag=0;
  visited[u]=1;
  DFS[k++] = u;
  s[++top]=u;
  while(top!= -1){
    for(v=1;v<=n;v++){
      if(G[u][v]==1 && visited[v]==1){
        for(i=top;i>=0;i--){
          if(s[i]==v){
            flag=1;
          }
        }
      }
      if(G[u][v]==1 && visited[v]==0){
        visited[v]= 1;
        s[++top] = v;
        DFS[k++] = v;
        u = v;
        v = 0;
      }
    }
    if (flag == 1){
      printf("Cycle Detected topological sort not possible \n");
      return;
    }
    j++;
    pop[j]=u;
    top--;
    u=s[top];
  }
}
void topo(int n,int G[][MAX]){
    for(int i=1;i<=n;i++)
        visited[i]=0;
    for(int u=1;u<=n;u++){
        if(visited[u]==0)
        dfs(u,n,G);
    }
}
